{"ast":null,"code":"// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid } from \"@reduxjs/toolkit\";\n// npm i date-fns per la data/ora post\nimport { sub } from 'date-fns';\n// State iniziale (simile al reducer)\nconst initialState = [{\n  id: '1',\n  title: 'Learning Redux Toolkit with Typescript',\n  content: 'I\\'ve heard good things.',\n  userId: '',\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0 // wow: 0,\n    // heart: 0,\n    // rocket: 0,\n    // coffee: 0\n\n  }\n}, {\n  id: '2',\n  title: 'Slices...',\n  content: 'The more i say slice, the more i want pizza.',\n  userId: '',\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}];\n// Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // questo postAdded ha un reducer e una prepare che è una funzione callback\n    postAdded: {\n      reducer(state, action) {\n        // Action sarà l'azione dispatchata\n        // Payload corrisponderà alle values inserite nelle form\n        // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n        // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0 // wow: 0,\n              // heart: 0,\n              // rocket: 0,\n              // coffee: 0\n\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  }\n}); // https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\n\nexport const selectAllPosts = state => state.posts; // Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n// slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n// ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions; // Export del reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","id","title","content","userId","date","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","posts","actions"],"sources":["/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/redux-data-flow/src/features/posts/postsSlice.tsx"],"sourcesContent":["// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { act } from \"react-dom/test-utils\";\n// npm i date-fns per la data/ora post\nimport {sub} from 'date-fns';\nimport { type } from \"os\";\nimport { Key } from \"react\";\n\n// State iniziale (simile al reducer)\nconst initialState = [\n    {\n        id: '1', \n        title: 'Learning Redux Toolkit with Typescript', \n        content: 'I\\'ve heard good things.',\n        userId: '',\n        date: sub(new Date(), {minutes: 10}).toISOString(),\n        reactions: {\n            thumbsUp: 0,\n            // wow: 0,\n            // heart: 0,\n            // rocket: 0,\n            // coffee: 0\n        }\n    },\n    {\n        id: '2', \n        title: 'Slices...', \n        content: 'The more i say slice, the more i want pizza.',\n        userId: '',\n        date: sub(new Date(), {minutes: 5}).toISOString(),\n        reactions: {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0\n        }\n    }\n]\n\nexport type Reactions = {\n    thumbsUp: number;\n    wow: number;\n    heart: number;\n    rocket: number;\n    coffee: number;\n}\n\n// Custom type per payload action\ntype PostsPayload = PayloadAction<{\n    id: string; \n    title: string; \n    content: string;\n    userId: string;\n    date: string;\n    reactions: Reactions;\n}>\n\n// Custom type per reactions\ntype ReactionsPayload = PayloadAction<{\n    postId: string;\n    reaction: keyof Reactions;\n}>\n\n// Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        // questo postAdded ha un reducer e una prepare che è una funzione callback\n        postAdded:{\n            reducer(state, action: PostsPayload){\n                // Action sarà l'azione dispatchata\n                // Payload corrisponderà alle values inserite nelle form\n                // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n                    // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n                state.push(action.payload);\n            },\n            prepare(title: string, content: string, userId: string){\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        userId,\n                        date: new Date().toISOString(),\n                        reactions: {\n                            thumbsUp: 0,\n                            // wow: 0,\n                            // heart: 0,\n                            // rocket: 0,\n                            // coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action: ReactionsPayload){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.find(post => post.id === postId)\n            if(existingPost){\n                existingPost.reactions[reaction]++;\n            }\n        }\n    }\n});\n\n// https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\nexport const selectAllPosts = (state: RootState) => state.posts;\n\n// Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n   // slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n    // ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n   export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// Export del reducer\nexport default postsSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,MAAtB,QAAmD,kBAAnD;AAGA;AACA,SAAQC,GAAR,QAAkB,UAAlB;AAIA;AACA,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,GADR;EAEIC,KAAK,EAAE,wCAFX;EAGIC,OAAO,EAAE,0BAHb;EAIIC,MAAM,EAAE,EAJZ;EAKIC,IAAI,EAAEN,GAAG,CAAC,IAAIO,IAAJ,EAAD,EAAa;IAACC,OAAO,EAAE;EAAV,CAAb,CAAH,CAA+BC,WAA/B,EALV;EAMIC,SAAS,EAAE;IACPC,QAAQ,EAAE,CADH,CAEP;IACA;IACA;IACA;;EALO;AANf,CADiB,EAejB;EACIT,EAAE,EAAE,GADR;EAEIC,KAAK,EAAE,WAFX;EAGIC,OAAO,EAAE,8CAHb;EAIIC,MAAM,EAAE,EAJZ;EAKIC,IAAI,EAAEN,GAAG,CAAC,IAAIO,IAAJ,EAAD,EAAa;IAACC,OAAO,EAAE;EAAV,CAAb,CAAH,CAA8BC,WAA9B,EALV;EAMIC,SAAS,EAAE;IACPC,QAAQ,EAAE,CADH;IAEPC,GAAG,EAAE,CAFE;IAGPC,KAAK,EAAE,CAHA;IAIPC,MAAM,EAAE,CAJD;IAKPC,MAAM,EAAE;EALD;AANf,CAfiB,CAArB;AAuDA;AACA,MAAMC,UAAU,GAAGlB,WAAW,CAAC;EAC3BmB,IAAI,EAAE,OADqB;EAE3BhB,YAF2B;EAG3BiB,QAAQ,EAAE;IACN;IACAC,SAAS,EAAC;MACNC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAA6B;QAChC;QACA;QACA;QACI;QACJD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;MACH,CAPK;;MAQNC,OAAO,CAACtB,KAAD,EAAgBC,OAAhB,EAAiCC,MAAjC,EAAgD;QACnD,OAAO;UACHmB,OAAO,EAAE;YACLtB,EAAE,EAAEH,MAAM,EADL;YAELI,KAFK;YAGLC,OAHK;YAILC,MAJK;YAKLC,IAAI,EAAE,IAAIC,IAAJ,GAAWE,WAAX,EALD;YAMLC,SAAS,EAAE;cACPC,QAAQ,EAAE,CADH,CAEP;cACA;cACA;cACA;;YALO;UANN;QADN,CAAP;MAgBH;;IAzBK,CAFJ;;IA6BNe,aAAa,CAACL,KAAD,EAAQC,MAAR,EAAiC;MAC1C,MAAM;QAACK,MAAD;QAASC;MAAT,IAAqBN,MAAM,CAACE,OAAlC;MACA,MAAMK,YAAY,GAAGR,KAAK,CAACS,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAAC7B,EAAL,KAAYyB,MAA/B,CAArB;;MACA,IAAGE,YAAH,EAAgB;QACZA,YAAY,CAACnB,SAAb,CAAuBkB,QAAvB;MACH;IACJ;;EAnCK;AAHiB,CAAD,CAA9B,C,CA0CA;AAEA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAIX,KAAD,IAAsBA,KAAK,CAACY,KAAnD,C,CAEP;AACA;AACG;AACH;AACI;;AACD,OAAO,MAAM;EAAEd,SAAF;EAAaO;AAAb,IAA+BV,UAAU,CAACkB,OAAhD,C,CAEV;;AACA,eAAelB,UAAU,CAACI,OAA1B"},"metadata":{},"sourceType":"module"}