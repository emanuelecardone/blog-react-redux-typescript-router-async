{"ast":null,"code":"// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { sub } from \"date-fns\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport let Status;\n\n(function (Status) {\n  Status[\"IDLE\"] = \"idle\";\n  Status[\"LOADING\"] = \"loading\";\n  Status[\"SUCCEDED\"] = \"succeded\";\n  Status[\"FAILED\"] = \"failed\";\n})(Status || (Status = {}));\n\n// State iniziale (simile al reducer)\nconst initialState = {\n  posts: [],\n  status: Status.IDLE,\n  // 'idle' | 'loading' | 'succeded' | 'failed'\n  error: null\n}; // Fetch per prendere i post\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    console.log(response);\n    return [...response.data];\n  } catch (err) {\n    // Runtime check\n    if (typeof err === 'string') {\n      return err;\n    } else if (err instanceof Error) {\n      return err.message;\n    }\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  try {\n    const response = await axios.post(POSTS_URL, initialPost);\n    return response.data;\n  } catch (err) {\n    if (typeof err === 'string') {\n      return err;\n    } else if (err instanceof Error) {\n      return err.message;\n    }\n  }\n}); // Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // questo postAdded ha un reducer e una prepare che è una funzione callback\n    postAdded: {\n      reducer(state, action) {\n        // Action sarà l'azione dispatchata\n        // Payload corrisponderà alle values inserite nelle form\n        // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n        // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, body, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            body,\n            userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    // Gestione di tutti i casi status tramite builder\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = Status.LOADING;\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = Status.SUCCEDED; // Data e reazioni\n\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      }); // Aggiunta di ogni post fetchato nell'array\n\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = Status.FAILED;\n      state.error = action.error.message;\n    }) // Case per il nuovo post\n    .addCase(addNewPost.fulfilled, (state, action) => {\n      // Fix per api post id non accurati\n      // Assegnazione id manuale (non sarebbe necessaria se l'api ritornasse id accurati)\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        wow: 0,\n        heart: 0,\n        rocket: 0,\n        coffee: 0\n      };\n      state.posts.push(action.payload);\n    });\n  }\n\n}); // https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\n\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error; // Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n// slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n// ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions; // Export del reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","axios","sub","POSTS_URL","Status","initialState","posts","status","IDLE","error","fetchPosts","response","get","console","log","data","err","Error","message","addNewPost","initialPost","post","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","body","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","LOADING","fulfilled","SUCCEDED","min","loadedPosts","map","minutes","concat","rejected","FAILED","sortedPosts","sort","a","b","length","Number","selectAllPosts","getPostStatus","getPostsError","actions"],"sources":["/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/react-redux-typescript-async/src/features/posts/postsSlice.tsx"],"sourcesContent":["// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport axios from \"axios\";\nimport {sub} from \"date-fns\";\nimport { type } from \"@testing-library/user-event/dist/type\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport type Reactions = {\n    thumbsUp: number;\n    wow: number;\n    heart: number;\n    rocket: number;\n    coffee: number;\n}\n\ntype Post = {\n    id: string; \n    title: string; \n    body: string;\n    userId: string;\n    date: string;\n    reactions: Reactions;\n}\n\ntype InitialPost = {\n    title: string;\n    body: string;\n    userId: string;\n}\n\n// Custom type per payload action\ntype PostsPayload = PayloadAction<Post>\n\n// Custom type per reactions\ntype ReactionsPayload = PayloadAction<{\n    postId: string;\n    reaction: keyof Reactions;\n}>\n\nexport enum Status {\n    IDLE = 'idle',\n    LOADING = 'loading',\n    SUCCEDED = 'succeded',\n    FAILED = 'failed'\n}\n\ntype InitialState = {\n    posts: Post[];\n    status: Status;\n    error: unknown | Error;\n}\n\n// State iniziale (simile al reducer)\nconst initialState: InitialState = {\n    posts: [],\n    status: Status.IDLE, // 'idle' | 'loading' | 'succeded' | 'failed'\n    error: null\n} \n\n// Fetch per prendere i post\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    try {\n\n        const response = await axios.get(POSTS_URL);\n        console.log(response);\n        return [...response.data] as Post[];\n\n    } catch(err: unknown){\n\n        // Runtime check\n        if(typeof err === 'string'){\n            return err;\n        } else if(err instanceof Error) {\n            return err.message;\n        }\n    }\n\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost: InitialPost) => {\n    try {\n\n        const response = await axios.post(POSTS_URL, initialPost);\n        return response.data as Post[];\n\n    } catch(err: unknown) {\n        if(typeof err === 'string'){\n            return err;\n        } else if (err instanceof Error){\n            return err.message;\n        }\n    }\n});\n\n// Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        // questo postAdded ha un reducer e una prepare che è una funzione callback\n        postAdded:{\n            reducer(state, action: PostsPayload){\n                // Action sarà l'azione dispatchata\n                // Payload corrisponderà alle values inserite nelle form\n                // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n                    // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n                state.posts.push(action.payload);\n            },\n            prepare(title: string, body: string, userId: string){\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        body,\n                        userId,\n                        date: new Date().toISOString(),\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action: ReactionsPayload){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.posts.find(post => post.id === postId)\n            if(existingPost){\n                existingPost.reactions[reaction]++;\n            }\n        }\n    },\n    extraReducers(builder){\n        // Gestione di tutti i casi status tramite builder\n        builder\n            .addCase(fetchPosts.pending, (state, action) => {\n                state.status = Status.LOADING;\n            })\n            .addCase(fetchPosts.fulfilled, (state, action: PayloadAction<any>) => {\n                state.status = Status.SUCCEDED;\n                // Data e reazioni\n                let min = 1;\n                const loadedPosts = action.payload.map((post: Post) => {\n                    post.date = sub(new Date(), {minutes: min++}).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n\n                // Aggiunta di ogni post fetchato nell'array\n                state.posts = state.posts.concat(loadedPosts);\n            })\n            .addCase(fetchPosts.rejected, (state, action) => {\n                state.status = Status.FAILED;\n                state.error = action.error.message;\n            })\n            // Case per il nuovo post\n            .addCase(addNewPost.fulfilled, (state, action: PayloadAction<any>) => {\n\n                // Fix per api post id non accurati\n                // Assegnazione id manuale (non sarebbe necessaria se l'api ritornasse id accurati)\n                const sortedPosts = state.posts.sort((a: Post, b: Post) => {\n                    if(a.id > b.id) return 1;\n                    if(a.id < b.id) return -1;\n                    return 0;\n                });\n                action.payload.id = sortedPosts[sortedPosts.length - 1].id +1;\n\n                action.payload.userId = Number(action.payload.userId);\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    wow: 0,\n                    heart: 0,\n                    rocket: 0,\n                    coffee: 0\n                }\n                state.posts.push(action.payload);\n            })\n    }\n});\n\n// https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\nexport const selectAllPosts = (state: RootState) => state.posts.posts;\nexport const getPostStatus = (state: RootState) => state.posts.status;\nexport const getPostsError = (state: RootState) => state.posts.error;\n\n// Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n   // slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n    // ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n   export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// Export del reducer\nexport default postsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}