{"ast":null,"code":"var _jsxFileName = \"/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/redux-data-flow/src/features/posts/AddPostForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// nanoid è uno strumento di redux toolkit per generare id random\nimport { nanoid } from '@reduxjs/toolkit';\nimport { postAdded } from './postsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddPostForm = () => {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const dispatch = useDispatch();\n\n  const onTitleChanged = e => {\n    setTitle(e.target.value);\n  };\n\n  const onContentChanged = e => {\n    setContent(e.target.value);\n  };\n\n  const savePost = () => {\n    if (title && content) {\n      dispatch(postAdded({\n        id: nanoid(),\n        title,\n        content\n      }));\n    } else {\n      alert('Please insert a valid post');\n    }\n\n    setTitle('');\n    setContent('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: savePost,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"post-title\",\n        children: \"Post Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"post-title\",\n        name: \"post-title\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"post-content\",\n        children: \"Post Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"post-content\",\n        name: \"post-content\",\n        value: content,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPostForm, \"0/VwjnJAcxdq8NIz09thNbUoLxg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddPostForm;\nexport default AddPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"names":["React","useState","useDispatch","nanoid","postAdded","AddPostForm","title","setTitle","content","setContent","dispatch","onTitleChanged","e","target","value","onContentChanged","savePost","id","alert"],"sources":["/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/redux-data-flow/src/features/posts/AddPostForm.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../app/store';\n// nanoid è uno strumento di redux toolkit per generare id random\nimport { nanoid } from '@reduxjs/toolkit';\nimport { postAdded } from './postsSlice';\n\nconst AddPostForm = () => {\n\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const onTitleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.target.value);\n    }\n    const onContentChanged = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setContent(e.target.value);\n    }\n\n    const savePost = () => {\n        if(title && content){\n            dispatch(\n                postAdded({\n                    id: nanoid(),\n                    title,\n                    content\n                })\n            )\n        } else{\n            alert('Please insert a valid post')\n        }\n        setTitle('');\n        setContent('');\n    }\n\n    return (\n        <section>\n            <h2>Add a New Post</h2>\n            <form onSubmit={savePost}>\n                <label htmlFor=\"post-title\">Post Title:</label>\n                <input \n                    type=\"text\" \n                    id='post-title'\n                    name='post-title'\n                    value={title}\n                    onChange={onTitleChanged}\n                />\n                <label htmlFor=\"post-content\">Post Content:</label>\n                <textarea \n                    id='post-content' \n                    name='post-content'\n                    value={content}\n                    onChange={onContentChanged}\n                />\n                <button type='submit'>Save Post</button>\n            </form>\n        </section>\n    )\n}\n\nexport default AddPostForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EAEtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;EAEA,MAAMS,QAAQ,GAAGR,WAAW,EAA5B;;EAEA,MAAMS,cAAc,GAAIC,CAAD,IAA4C;IAC/DL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;EACH,CAFD;;EAGA,MAAMC,gBAAgB,GAAIH,CAAD,IAA+C;IACpEH,UAAU,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;EACH,CAFD;;EAIA,MAAME,QAAQ,GAAG,MAAM;IACnB,IAAGV,KAAK,IAAIE,OAAZ,EAAoB;MAChBE,QAAQ,CACJN,SAAS,CAAC;QACNa,EAAE,EAAEd,MAAM,EADJ;QAENG,KAFM;QAGNE;MAHM,CAAD,CADL,CAAR;IAOH,CARD,MAQM;MACFU,KAAK,CAAC,4BAAD,CAAL;IACH;;IACDX,QAAQ,CAAC,EAAD,CAAR;IACAE,UAAU,CAAC,EAAD,CAAV;EACH,CAdD;;EAgBA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAM,QAAQ,EAAEO,QAAhB;MAAA,wBACI;QAAO,OAAO,EAAC,YAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QACI,IAAI,EAAC,MADT;QAEI,EAAE,EAAC,YAFP;QAGI,IAAI,EAAC,YAHT;QAII,KAAK,EAAEV,KAJX;QAKI,QAAQ,EAAEK;MALd;QAAA;QAAA;QAAA;MAAA,QAFJ,eASI;QAAO,OAAO,EAAC,cAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ,eAUI;QACI,EAAE,EAAC,cADP;QAEI,IAAI,EAAC,cAFT;QAGI,KAAK,EAAEH,OAHX;QAII,QAAQ,EAAEO;MAJd;QAAA;QAAA;QAAA;MAAA,QAVJ,eAgBI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH,CArDD;;GAAMV,W;UAKeH,W;;;KALfG,W;AAuDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}