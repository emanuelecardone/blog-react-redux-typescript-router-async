{"ast":null,"code":"// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { sub } from \"date-fns\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n// State iniziale (simile al reducer)\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeded' | 'failed'\n  error: null\n}; // Fetch per prendere i post\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    return [...response.data];\n  } catch (err) {\n    // Runtime check\n    if (typeof err === 'string') {\n      return err;\n    } else if (err instanceof Error) {\n      return err.message;\n    }\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initalPost => {\n  try {\n    const response = await axios.post(POSTS_URL, initalPost);\n    return response.data;\n  } catch (err) {\n    if (typeof err === 'string') {\n      return err;\n    } else if (err instanceof Error) {\n      return err.message;\n    }\n  }\n}); // Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // questo postAdded ha un reducer e una prepare che è una funzione callback\n    postAdded: {\n      reducer(state, action) {\n        // Action sarà l'azione dispatchata\n        // Payload corrisponderà alle values inserite nelle form\n        // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n        // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n        state.posts.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  },\n\n  extraReducers(builder) {\n    // Gestione di tutti i casi status tramite builder\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded'; // Data e reazioni\n\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0\n        };\n        return post;\n      }); // Aggiunta di ogni post fetchato nell'array\n\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }) // Case per il nuovo post\n    .addCase(addNewPost.fulfilled, (state, action) => {\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        hooray: 0,\n        heart: 0,\n        rocket: 0,\n        eyes: 0\n      };\n      state.posts.push(action.payload);\n    });\n  }\n\n}); // https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\n\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error; // Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n// slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n// ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions; // Export del reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","axios","sub","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","err","Error","message","addNewPost","initalPost","post","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","hooray","eyes","concat","rejected","Number","selectAllPosts","getPostStatus","getPostsError","actions"],"sources":["/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/react-redux-typescript-async/src/features/posts/postsSlice.tsx"],"sourcesContent":["// nanoid è uno strumento di redux toolkit per generare id random\nimport { createSlice, nanoid, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport axios, { AxiosError } from \"axios\";\nimport {sub, parseISO, formatDistanceToNow} from \"date-fns\";\nimport React from \"react\";\nimport { CatchClause } from \"typescript\";\nimport { Exception } from \"sass\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport type Reactions = {\n    thumbsUp: number;\n    wow: number;\n    heart: number;\n    rocket: number;\n    coffee: number;\n}\n\n// Custom type per payload action\ntype PostsPayload = PayloadAction<{\n    id: string; \n    title: string; \n    content: string;\n    userId: string;\n    date: string;\n    reactions: Reactions;\n}>\n\n// Custom type per reactions\ntype ReactionsPayload = PayloadAction<{\n    postId: string;\n    reaction: keyof Reactions;\n}>\n\n\n// State iniziale (simile al reducer)\nconst initialState = {\n    posts: [],\n    status: 'idle', // 'idle' | 'loading' | 'succeded' | 'failed'\n    error: null\n}\n\n// Fetch per prendere i post\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    try {\n\n        const response = await axios.get(POSTS_URL);\n        return [...response.data];\n\n    } catch(err: unknown){\n\n        // Runtime check\n        if(typeof err === 'string'){\n            return err;\n        } else if(err instanceof Error) {\n            return err.message;\n        }\n    }\n\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initalPost) => {\n    try {\n\n        const response = await axios.post(POSTS_URL, initalPost);\n        return response.data;\n\n    } catch(err: unknown) {\n        if(typeof err === 'string'){\n            return err;\n        } else if (err instanceof Error){\n            return err.message;\n        }\n    }\n});\n\n// Export slice (oggetto che ha un nome, uno state iniziale, e i reducers che compieranno varie azioni)\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        // questo postAdded ha un reducer e una prepare che è una funzione callback\n        postAdded:{\n            reducer(state, action: PostsPayload){\n                // Action sarà l'azione dispatchata\n                // Payload corrisponderà alle values inserite nelle form\n                // IMPORTANTE: si può usare il push invece di useState solo perché redux toolkit usa una sintassi js,\n                    // in tutti gli altri file non-slice però si deve ancora usare useState o l'hook che fa a quel caso\n                state.posts.push(action.payload);\n            },\n            prepare(title: string, content: string, userId: string){\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        userId,\n                        date: new Date().toISOString(),\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action: ReactionsPayload){\n            const {postId, reaction} = action.payload;\n            const existingPost = state.posts.find(post => post.id === postId)\n            if(existingPost){\n                existingPost.reactions[reaction]++;\n            }\n        }\n    },\n    extraReducers(builder){\n        // Gestione di tutti i casi status tramite builder\n        builder\n            .addCase(fetchPosts.pending, (state, action) => {\n                state.status = 'loading';\n            })\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                // Data e reazioni\n                let min = 1;\n                const loadedPosts = action.payload.map(post => {\n                    post.date = sub(new Date(), {minutes: min++}).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        hooray: 0,\n                        heart: 0,\n                        rocket: 0,\n                        eyes: 0\n                    }\n                    return post;\n                });\n\n                // Aggiunta di ogni post fetchato nell'array\n                state.posts = state.posts.concat(loadedPosts);\n            })\n            .addCase(fetchPosts.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.error.message;\n            })\n            // Case per il nuovo post\n            .addCase(addNewPost.fulfilled, (state, action) => {\n                action.payload.userId = Number(action.payload.userId);\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    hooray: 0,\n                    heart: 0,\n                    rocket: 0,\n                    eyes: 0\n                }\n                state.posts.push(action.payload);\n            })\n    }\n});\n\n// https://redux-toolkit.js.org/usage/usage-with-typescript#createslice\n\n// In futuro se cambia initialState non avremo più un array e si dovrà cambiare state in ogni componente\n// Quindi si generalizza l'export selezionando tutti i post, così se cambiano i post si dovrà cambiare solo lo slice\nexport const selectAllPosts = (state: RootState) => state.posts.posts;\nexport const getPostStatus = (state: RootState) => state.posts.status;\nexport const getPostsError = (state: RootState) => state.posts.error;\n\n// Actions è la keyword per esportare le possibili azioni\n// Quando si scrive questa funzione postAdded e si crea,\n   // slice genera in automatico un'azione \"creator function\" con lo stesso nome della funzione che adda i post\n// Quindi si sta esportando questa azione creator function che è creata automaticamente,\n    // ed è per questo che sopra non si vede la creazione postSlice.action, è automaticamente creata\n   export const { postAdded, reactionAdded } = postsSlice.actions;\n\n// Export del reducer\nexport default postsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}