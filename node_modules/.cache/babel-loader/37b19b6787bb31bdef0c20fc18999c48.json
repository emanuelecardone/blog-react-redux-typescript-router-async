{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst initialState = [];\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await fetch(USERS_URL);\n  const data = await response.json();\n  return data; // try{\n  //     const response = await axios.get(USERS_URL);\n  //     return [...response.data] as Users;\n  // } catch(err: unknown){\n  //     if(typeof err === 'string'){\n  //         return err;\n  //     } else if (err instanceof Error){\n  //         return err.message;\n  //     }\n  // }\n});\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n\n  extraReducers(builder) {\n    // Senza funzioni js come il push nell'array, si sta facendo un override totale dell'initialState \n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  }\n\n});\nexport const selectAllUsers = state => state.users;\nexport default usersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","USERS_URL","initialState","fetchUsers","response","fetch","data","json","usersSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectAllUsers","users","reducer"],"sources":["/Users/emanuelecardone/Desktop/Corsi /Redux/Esempi/react-redux-typescript-async/src/features/users/usersSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Status } from \"../posts/postsSlice\";\nimport { RootState } from \"../../app/store\";\n\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\ntype User = {\n    id: number | string;\n    name: string;\n    username: string;\n    email: string;\n    address: object;\n    phone: string;\n    website: string;\n    company: object;\n}\n\ntype Users = User[];\n\ntype UsersPayload = PayloadAction<Users>;\n\nconst initialState: Array<any> = [];\n\nexport const fetchUsers = createAsyncThunk<Users>(\n    'users/fetchUsers', \n    async () => {\n        const response = await fetch(USERS_URL);\n        const data: Users = await response.json();\n        return data;\n    // try{\n\n    //     const response = await axios.get(USERS_URL);\n    //     return [...response.data] as Users;\n\n    // } catch(err: unknown){\n\n    //     if(typeof err === 'string'){\n    //         return err;\n    //     } else if (err instanceof Error){\n    //         return err.message;\n    //     }\n\n    // }\n\n});\n\nconst usersSlice = createSlice({\n    name: 'users',\n    initialState,\n    reducers: {},\n    extraReducers(builder){\n        // Senza funzioni js come il push nell'array, si sta facendo un override totale dell'initialState \n        builder.addCase(fetchUsers.fulfilled, (state, action) => {\n            return action.payload;\n        })\n    }\n});\n\n\nexport const selectAllUsers = (state: RootState) => state.users;\n\nexport default usersSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAAqE,kBAArE;AAKA,MAAMC,SAAS,GAAG,4CAAlB;AAiBA,MAAMC,YAAwB,GAAG,EAAjC;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CACtC,kBADsC,EAEtC,YAAY;EACR,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,SAAD,CAA5B;EACA,MAAMK,IAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B;EACA,OAAOD,IAAP,CAHQ,CAIZ;EAEA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EAEA;AAEH,CArByC,CAAnC;AAuBP,MAAME,UAAU,GAAGT,WAAW,CAAC;EAC3BU,IAAI,EAAE,OADqB;EAE3BP,YAF2B;EAG3BQ,QAAQ,EAAE,EAHiB;;EAI3BC,aAAa,CAACC,OAAD,EAAS;IAClB;IACAA,OAAO,CAACC,OAAR,CAAgBV,UAAU,CAACW,SAA3B,EAAsC,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACrD,OAAOA,MAAM,CAACC,OAAd;IACH,CAFD;EAGH;;AAT0B,CAAD,CAA9B;AAaA,OAAO,MAAMC,cAAc,GAAIH,KAAD,IAAsBA,KAAK,CAACI,KAAnD;AAEP,eAAeX,UAAU,CAACY,OAA1B"},"metadata":{},"sourceType":"module"}